// Generated by llvm2cpp - DO NOT MODIFY!


Module* makeLLVMModuleContents(Module *mod) {

mod->setModuleIdentifier("vm/gen/types32.bc");

// Type Definitions
std::vector<Type*>FuncTy_0_args;
StructType *StructTy_struct_rubinius__VMJIT = mod->getTypeByName("struct.rubinius::VMJIT");
if (!StructTy_struct_rubinius__VMJIT) {
StructTy_struct_rubinius__VMJIT = StructType::create(mod->getContext(), "struct.rubinius::VMJIT");
}
std::vector<Type*>StructTy_struct_rubinius__VMJIT_fields;
StructTy_struct_rubinius__VMJIT_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__VMJIT_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__VMJIT_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__VMJIT_fields.push_back(IntegerType::get(mod->getContext(), 8));
StructTy_struct_rubinius__VMJIT_fields.push_back(IntegerType::get(mod->getContext(), 8));
StructTy_struct_rubinius__VMJIT_fields.push_back(IntegerType::get(mod->getContext(), 8));
StructTy_struct_rubinius__VMJIT_fields.push_back(IntegerType::get(mod->getContext(), 8));
if (StructTy_struct_rubinius__VMJIT->isOpaque()) {
StructTy_struct_rubinius__VMJIT->setBody(StructTy_struct_rubinius__VMJIT_fields, /*isPacked=*/false);
}

PointerType* PointerTy_1 = PointerType::get(StructTy_struct_rubinius__VMJIT, 0);

FuncTy_0_args.push_back(PointerTy_1);
FunctionType* FuncTy_0 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_0_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_2_args;
StructType *StructTy_struct_rubinius__State = mod->getTypeByName("struct.rubinius::State");
if (!StructTy_struct_rubinius__State) {
StructTy_struct_rubinius__State = StructType::create(mod->getContext(), "struct.rubinius::State");
}
std::vector<Type*>StructTy_struct_rubinius__State_fields;
StructType *StructTy_struct_rubinius__VM = mod->getTypeByName("struct.rubinius::VM");
if (!StructTy_struct_rubinius__VM) {
StructTy_struct_rubinius__VM = StructType::create(mod->getContext(), "struct.rubinius::VM");
}
std::vector<Type*>StructTy_struct_rubinius__VM_fields;
if (StructTy_struct_rubinius__VM->isOpaque()) {
StructTy_struct_rubinius__VM->setBody(StructTy_struct_rubinius__VM_fields, /*isPacked=*/false);
}

PointerType* PointerTy_4 = PointerType::get(StructTy_struct_rubinius__VM, 0);

StructTy_struct_rubinius__State_fields.push_back(PointerTy_4);
StructTy_struct_rubinius__State_fields.push_back(PointerTy_1);
StructType *StructTy_struct_rubinius__Shared = mod->getTypeByName("struct.rubinius::Shared");
if (!StructTy_struct_rubinius__Shared) {
StructTy_struct_rubinius__Shared = StructType::create(mod->getContext(), "struct.rubinius::Shared");
}
std::vector<Type*>StructTy_struct_rubinius__Shared_fields;
if (StructTy_struct_rubinius__Shared->isOpaque()) {
StructTy_struct_rubinius__Shared->setBody(StructTy_struct_rubinius__Shared_fields, /*isPacked=*/false);
}

PointerType* PointerTy_5 = PointerType::get(StructTy_struct_rubinius__Shared, 0);

StructTy_struct_rubinius__State_fields.push_back(PointerTy_5);
if (StructTy_struct_rubinius__State->isOpaque()) {
StructTy_struct_rubinius__State->setBody(StructTy_struct_rubinius__State_fields, /*isPacked=*/false);
}

PointerType* PointerTy_3 = PointerType::get(StructTy_struct_rubinius__State, 0);

FuncTy_2_args.push_back(PointerTy_3);
FunctionType* FuncTy_2 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_2_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_6_args;
StructType *StructTy_struct_rubinius__Arguments = mod->getTypeByName("struct.rubinius::Arguments");
if (!StructTy_struct_rubinius__Arguments) {
StructTy_struct_rubinius__Arguments = StructType::create(mod->getContext(), "struct.rubinius::Arguments");
}
std::vector<Type*>StructTy_struct_rubinius__Arguments_fields;
StructType *StructTy_struct_rubinius__Symbol = mod->getTypeByName("struct.rubinius::Symbol");
if (!StructTy_struct_rubinius__Symbol) {
StructTy_struct_rubinius__Symbol = StructType::create(mod->getContext(), "struct.rubinius::Symbol");
}
std::vector<Type*>StructTy_struct_rubinius__Symbol_fields;
if (StructTy_struct_rubinius__Symbol->isOpaque()) {
StructTy_struct_rubinius__Symbol->setBody(StructTy_struct_rubinius__Symbol_fields, /*isPacked=*/false);
}

PointerType* PointerTy_8 = PointerType::get(StructTy_struct_rubinius__Symbol, 0);

StructTy_struct_rubinius__Arguments_fields.push_back(PointerTy_8);
StructType *StructTy_struct_rubinius__Object = mod->getTypeByName("struct.rubinius::Object");
if (!StructTy_struct_rubinius__Object) {
StructTy_struct_rubinius__Object = StructType::create(mod->getContext(), "struct.rubinius::Object");
}
std::vector<Type*>StructTy_struct_rubinius__Object_fields;
StructType *StructTy_struct_rubinius__ObjectHeader = mod->getTypeByName("struct.rubinius::ObjectHeader");
if (!StructTy_struct_rubinius__ObjectHeader) {
StructTy_struct_rubinius__ObjectHeader = StructType::create(mod->getContext(), "struct.rubinius::ObjectHeader");
}
std::vector<Type*>StructTy_struct_rubinius__ObjectHeader_fields;
StructType *StructTy_union_rubinius__HeaderWord = mod->getTypeByName("union.rubinius::HeaderWord");
if (!StructTy_union_rubinius__HeaderWord) {
StructTy_union_rubinius__HeaderWord = StructType::create(mod->getContext(), "union.rubinius::HeaderWord");
}
std::vector<Type*>StructTy_union_rubinius__HeaderWord_fields;
StructTy_union_rubinius__HeaderWord_fields.push_back(IntegerType::get(mod->getContext(), 64));
if (StructTy_union_rubinius__HeaderWord->isOpaque()) {
StructTy_union_rubinius__HeaderWord->setBody(StructTy_union_rubinius__HeaderWord_fields, /*isPacked=*/false);
}

StructTy_struct_rubinius__ObjectHeader_fields.push_back(StructTy_union_rubinius__HeaderWord);
StructType *StructTy_struct_rubinius__Class = mod->getTypeByName("struct.rubinius::Class");
if (!StructTy_struct_rubinius__Class) {
StructTy_struct_rubinius__Class = StructType::create(mod->getContext(), "struct.rubinius::Class");
}
std::vector<Type*>StructTy_struct_rubinius__Class_fields;
StructType *StructTy_struct_rubinius__Module = mod->getTypeByName("struct.rubinius::Module");
if (!StructTy_struct_rubinius__Module) {
StructTy_struct_rubinius__Module = StructType::create(mod->getContext(), "struct.rubinius::Module");
}
std::vector<Type*>StructTy_struct_rubinius__Module_fields;
StructTy_struct_rubinius__Module_fields.push_back(StructTy_struct_rubinius__Object);
StructType *StructTy_struct_rubinius__MethodTable = mod->getTypeByName("struct.rubinius::MethodTable");
if (!StructTy_struct_rubinius__MethodTable) {
StructTy_struct_rubinius__MethodTable = StructType::create(mod->getContext(), "struct.rubinius::MethodTable");
}
std::vector<Type*>StructTy_struct_rubinius__MethodTable_fields;
if (StructTy_struct_rubinius__MethodTable->isOpaque()) {
StructTy_struct_rubinius__MethodTable->setBody(StructTy_struct_rubinius__MethodTable_fields, /*isPacked=*/false);
}

PointerType* PointerTy_11 = PointerType::get(StructTy_struct_rubinius__MethodTable, 0);

StructTy_struct_rubinius__Module_fields.push_back(PointerTy_11);
StructTy_struct_rubinius__Module_fields.push_back(PointerTy_8);
StructType *StructTy_struct_rubinius__LookupTable = mod->getTypeByName("struct.rubinius::LookupTable");
if (!StructTy_struct_rubinius__LookupTable) {
StructTy_struct_rubinius__LookupTable = StructType::create(mod->getContext(), "struct.rubinius::LookupTable");
}
std::vector<Type*>StructTy_struct_rubinius__LookupTable_fields;
if (StructTy_struct_rubinius__LookupTable->isOpaque()) {
StructTy_struct_rubinius__LookupTable->setBody(StructTy_struct_rubinius__LookupTable_fields, /*isPacked=*/false);
}

PointerType* PointerTy_12 = PointerType::get(StructTy_struct_rubinius__LookupTable, 0);

StructTy_struct_rubinius__Module_fields.push_back(PointerTy_12);
PointerType* PointerTy_13 = PointerType::get(StructTy_struct_rubinius__Module, 0);

StructTy_struct_rubinius__Module_fields.push_back(PointerTy_13);
StructTy_struct_rubinius__Module_fields.push_back(PointerTy_13);
StructType *StructTy_struct_rubinius__Array = mod->getTypeByName("struct.rubinius::Array");
if (!StructTy_struct_rubinius__Array) {
StructTy_struct_rubinius__Array = StructType::create(mod->getContext(), "struct.rubinius::Array");
}
std::vector<Type*>StructTy_struct_rubinius__Array_fields;
StructTy_struct_rubinius__Array_fields.push_back(StructTy_struct_rubinius__Object);
StructType *StructTy_struct_rubinius__Fixnum = mod->getTypeByName("struct.rubinius::Fixnum");
if (!StructTy_struct_rubinius__Fixnum) {
StructTy_struct_rubinius__Fixnum = StructType::create(mod->getContext(), "struct.rubinius::Fixnum");
}
std::vector<Type*>StructTy_struct_rubinius__Fixnum_fields;
if (StructTy_struct_rubinius__Fixnum->isOpaque()) {
StructTy_struct_rubinius__Fixnum->setBody(StructTy_struct_rubinius__Fixnum_fields, /*isPacked=*/false);
}

PointerType* PointerTy_15 = PointerType::get(StructTy_struct_rubinius__Fixnum, 0);

StructTy_struct_rubinius__Array_fields.push_back(PointerTy_15);
StructType *StructTy_struct_rubinius__Tuple = mod->getTypeByName("struct.rubinius::Tuple");
if (!StructTy_struct_rubinius__Tuple) {
StructTy_struct_rubinius__Tuple = StructType::create(mod->getContext(), "struct.rubinius::Tuple");
}
std::vector<Type*>StructTy_struct_rubinius__Tuple_fields;
StructTy_struct_rubinius__Tuple_fields.push_back(StructTy_struct_rubinius__Object);
StructTy_struct_rubinius__Tuple_fields.push_back(IntegerType::get(mod->getContext(), 32));
PointerType* PointerTy_9 = PointerType::get(StructTy_struct_rubinius__Object, 0);

ArrayType* ArrayTy_17 = ArrayType::get(PointerTy_9, 0);

StructTy_struct_rubinius__Tuple_fields.push_back(ArrayTy_17);
if (StructTy_struct_rubinius__Tuple->isOpaque()) {
StructTy_struct_rubinius__Tuple->setBody(StructTy_struct_rubinius__Tuple_fields, /*isPacked=*/false);
}

PointerType* PointerTy_16 = PointerType::get(StructTy_struct_rubinius__Tuple, 0);

StructTy_struct_rubinius__Array_fields.push_back(PointerTy_16);
StructTy_struct_rubinius__Array_fields.push_back(PointerTy_15);
if (StructTy_struct_rubinius__Array->isOpaque()) {
StructTy_struct_rubinius__Array->setBody(StructTy_struct_rubinius__Array_fields, /*isPacked=*/false);
}

PointerType* PointerTy_14 = PointerType::get(StructTy_struct_rubinius__Array, 0);

StructTy_struct_rubinius__Module_fields.push_back(PointerTy_14);
PointerType* PointerTy_10 = PointerType::get(StructTy_struct_rubinius__Class, 0);

StructTy_struct_rubinius__Module_fields.push_back(PointerTy_10);
StructTy_struct_rubinius__Module_fields.push_back(PointerTy_14);
if (StructTy_struct_rubinius__Module->isOpaque()) {
StructTy_struct_rubinius__Module->setBody(StructTy_struct_rubinius__Module_fields, /*isPacked=*/false);
}

StructTy_struct_rubinius__Class_fields.push_back(StructTy_struct_rubinius__Module);
StructTy_struct_rubinius__Class_fields.push_back(PointerTy_15);
StructTy_struct_rubinius__Class_fields.push_back(PointerTy_12);
StructType *StructTy_struct_rubinius__TypeInfo = mod->getTypeByName("struct.rubinius::TypeInfo");
if (!StructTy_struct_rubinius__TypeInfo) {
StructTy_struct_rubinius__TypeInfo = StructType::create(mod->getContext(), "struct.rubinius::TypeInfo");
}
std::vector<Type*>StructTy_struct_rubinius__TypeInfo_fields;
if (StructTy_struct_rubinius__TypeInfo->isOpaque()) {
StructTy_struct_rubinius__TypeInfo->setBody(StructTy_struct_rubinius__TypeInfo_fields, /*isPacked=*/false);
}

PointerType* PointerTy_18 = PointerType::get(StructTy_struct_rubinius__TypeInfo, 0);

StructTy_struct_rubinius__Class_fields.push_back(PointerTy_18);
StructTy_struct_rubinius__Class_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__Class_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__Class_fields.push_back(IntegerType::get(mod->getContext(), 32));
if (StructTy_struct_rubinius__Class->isOpaque()) {
StructTy_struct_rubinius__Class->setBody(StructTy_struct_rubinius__Class_fields, /*isPacked=*/false);
}


StructTy_struct_rubinius__ObjectHeader_fields.push_back(PointerTy_10);
StructTy_struct_rubinius__ObjectHeader_fields.push_back(PointerTy_9);
PointerType* PointerTy_20 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);

ArrayType* ArrayTy_19 = ArrayType::get(PointerTy_20, 0);

StructTy_struct_rubinius__ObjectHeader_fields.push_back(ArrayTy_19);
if (StructTy_struct_rubinius__ObjectHeader->isOpaque()) {
StructTy_struct_rubinius__ObjectHeader->setBody(StructTy_struct_rubinius__ObjectHeader_fields, /*isPacked=*/false);
}

StructTy_struct_rubinius__Object_fields.push_back(StructTy_struct_rubinius__ObjectHeader);
if (StructTy_struct_rubinius__Object->isOpaque()) {
StructTy_struct_rubinius__Object->setBody(StructTy_struct_rubinius__Object_fields, /*isPacked=*/false);
}


StructTy_struct_rubinius__Arguments_fields.push_back(PointerTy_9);
StructTy_struct_rubinius__Arguments_fields.push_back(PointerTy_9);
StructTy_struct_rubinius__Arguments_fields.push_back(IntegerType::get(mod->getContext(), 32));
PointerType* PointerTy_21 = PointerType::get(PointerTy_9, 0);

StructTy_struct_rubinius__Arguments_fields.push_back(PointerTy_21);
StructTy_struct_rubinius__Arguments_fields.push_back(PointerTy_16);
if (StructTy_struct_rubinius__Arguments->isOpaque()) {
StructTy_struct_rubinius__Arguments->setBody(StructTy_struct_rubinius__Arguments_fields, /*isPacked=*/false);
}

PointerType* PointerTy_7 = PointerType::get(StructTy_struct_rubinius__Arguments, 0);

FuncTy_6_args.push_back(PointerTy_7);
FunctionType* FuncTy_6 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_6_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_22_args;
StructType *StructTy_struct_rubinius__jit__RuntimeData = mod->getTypeByName("struct.rubinius::jit::RuntimeData");
if (!StructTy_struct_rubinius__jit__RuntimeData) {
StructTy_struct_rubinius__jit__RuntimeData = StructType::create(mod->getContext(), "struct.rubinius::jit::RuntimeData");
}
std::vector<Type*>StructTy_struct_rubinius__jit__RuntimeData_fields;
StructType *StructTy_struct_rubinius__CompiledCode = mod->getTypeByName("struct.rubinius::CompiledCode");
if (!StructTy_struct_rubinius__CompiledCode) {
StructTy_struct_rubinius__CompiledCode = StructType::create(mod->getContext(), "struct.rubinius::CompiledCode");
}
std::vector<Type*>StructTy_struct_rubinius__CompiledCode_fields;
StructType *StructTy_struct_rubinius__Executable = mod->getTypeByName("struct.rubinius::Executable");
if (!StructTy_struct_rubinius__Executable) {
StructTy_struct_rubinius__Executable = StructType::create(mod->getContext(), "struct.rubinius::Executable");
}
std::vector<Type*>StructTy_struct_rubinius__Executable_fields;
StructTy_struct_rubinius__Executable_fields.push_back(StructTy_struct_rubinius__Object);
StructTy_struct_rubinius__Executable_fields.push_back(PointerTy_8);
StructTy_struct_rubinius__Executable_fields.push_back(PointerTy_15);
std::vector<Type*>FuncTy_26_args;
FuncTy_26_args.push_back(PointerTy_3);
StructType *StructTy_struct_rubinius__CallFrame = mod->getTypeByName("struct.rubinius::CallFrame");
if (!StructTy_struct_rubinius__CallFrame) {
StructTy_struct_rubinius__CallFrame = StructType::create(mod->getContext(), "struct.rubinius::CallFrame");
}
std::vector<Type*>StructTy_struct_rubinius__CallFrame_fields;
PointerType* PointerTy_27 = PointerType::get(StructTy_struct_rubinius__CallFrame, 0);

StructTy_struct_rubinius__CallFrame_fields.push_back(PointerTy_27);
StructType *StructTy_struct_rubinius__ConstantScope = mod->getTypeByName("struct.rubinius::ConstantScope");
if (!StructTy_struct_rubinius__ConstantScope) {
StructTy_struct_rubinius__ConstantScope = StructType::create(mod->getContext(), "struct.rubinius::ConstantScope");
}
std::vector<Type*>StructTy_struct_rubinius__ConstantScope_fields;
if (StructTy_struct_rubinius__ConstantScope->isOpaque()) {
StructTy_struct_rubinius__ConstantScope->setBody(StructTy_struct_rubinius__ConstantScope_fields, /*isPacked=*/false);
}

PointerType* PointerTy_28 = PointerType::get(StructTy_struct_rubinius__ConstantScope, 0);

StructTy_struct_rubinius__CallFrame_fields.push_back(PointerTy_28);
StructTy_struct_rubinius__CallFrame_fields.push_back(PointerTy_20);
PointerType* PointerTy_24 = PointerType::get(StructTy_struct_rubinius__CompiledCode, 0);

StructTy_struct_rubinius__CallFrame_fields.push_back(PointerTy_24);
StructTy_struct_rubinius__CallFrame_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__CallFrame_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__CallFrame_fields.push_back(PointerTy_20);
StructType *StructTy_struct_rubinius__VariableScope = mod->getTypeByName("struct.rubinius::VariableScope");
if (!StructTy_struct_rubinius__VariableScope) {
StructTy_struct_rubinius__VariableScope = StructType::create(mod->getContext(), "struct.rubinius::VariableScope");
}
std::vector<Type*>StructTy_struct_rubinius__VariableScope_fields;
StructTy_struct_rubinius__VariableScope_fields.push_back(StructTy_struct_rubinius__Object);
StructTy_struct_rubinius__VariableScope_fields.push_back(PointerTy_9);
StructTy_struct_rubinius__VariableScope_fields.push_back(PointerTy_24);
StructTy_struct_rubinius__VariableScope_fields.push_back(PointerTy_13);
PointerType* PointerTy_29 = PointerType::get(StructTy_struct_rubinius__VariableScope, 0);

StructTy_struct_rubinius__VariableScope_fields.push_back(PointerTy_29);
StructTy_struct_rubinius__VariableScope_fields.push_back(PointerTy_16);
StructTy_struct_rubinius__VariableScope_fields.push_back(PointerTy_12);
StructTy_struct_rubinius__VariableScope_fields.push_back(PointerTy_9);
StructType *StructTy_struct_rubinius__Fiber = mod->getTypeByName("struct.rubinius::Fiber");
if (!StructTy_struct_rubinius__Fiber) {
StructTy_struct_rubinius__Fiber = StructType::create(mod->getContext(), "struct.rubinius::Fiber");
}
std::vector<Type*>StructTy_struct_rubinius__Fiber_fields;
if (StructTy_struct_rubinius__Fiber->isOpaque()) {
StructTy_struct_rubinius__Fiber->setBody(StructTy_struct_rubinius__Fiber_fields, /*isPacked=*/false);
}

PointerType* PointerTy_30 = PointerType::get(StructTy_struct_rubinius__Fiber, 0);

StructTy_struct_rubinius__VariableScope_fields.push_back(PointerTy_30);
StructTy_struct_rubinius__VariableScope_fields.push_back(PointerTy_9);
StructTy_struct_rubinius__VariableScope_fields.push_back(PointerTy_21);
StructTy_struct_rubinius__VariableScope_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__VariableScope_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__VariableScope_fields.push_back(IntegerType::get(mod->getContext(), 32));
if (StructTy_struct_rubinius__VariableScope->isOpaque()) {
StructTy_struct_rubinius__VariableScope->setBody(StructTy_struct_rubinius__VariableScope_fields, /*isPacked=*/false);
}


StructTy_struct_rubinius__CallFrame_fields.push_back(PointerTy_29);
StructType *StructTy_struct_rubinius__StackVariables = mod->getTypeByName("struct.rubinius::StackVariables");
if (!StructTy_struct_rubinius__StackVariables) {
StructTy_struct_rubinius__StackVariables = StructType::create(mod->getContext(), "struct.rubinius::StackVariables");
}
std::vector<Type*>StructTy_struct_rubinius__StackVariables_fields;
StructTy_struct_rubinius__StackVariables_fields.push_back(PointerTy_29);
StructTy_struct_rubinius__StackVariables_fields.push_back(PointerTy_29);
StructTy_struct_rubinius__StackVariables_fields.push_back(PointerTy_9);
StructTy_struct_rubinius__StackVariables_fields.push_back(PointerTy_9);
StructTy_struct_rubinius__StackVariables_fields.push_back(PointerTy_13);
StructTy_struct_rubinius__StackVariables_fields.push_back(PointerTy_9);
StructTy_struct_rubinius__StackVariables_fields.push_back(ArrayTy_17);
if (StructTy_struct_rubinius__StackVariables->isOpaque()) {
StructTy_struct_rubinius__StackVariables->setBody(StructTy_struct_rubinius__StackVariables_fields, /*isPacked=*/false);
}

PointerType* PointerTy_31 = PointerType::get(StructTy_struct_rubinius__StackVariables, 0);

StructTy_struct_rubinius__CallFrame_fields.push_back(PointerTy_31);
StructTy_struct_rubinius__CallFrame_fields.push_back(PointerTy_7);
StructTy_struct_rubinius__CallFrame_fields.push_back(ArrayTy_17);
if (StructTy_struct_rubinius__CallFrame->isOpaque()) {
StructTy_struct_rubinius__CallFrame->setBody(StructTy_struct_rubinius__CallFrame_fields, /*isPacked=*/false);
}


FuncTy_26_args.push_back(PointerTy_27);
PointerType* PointerTy_32 = PointerType::get(StructTy_struct_rubinius__Executable, 0);

FuncTy_26_args.push_back(PointerTy_32);
FuncTy_26_args.push_back(PointerTy_13);
FuncTy_26_args.push_back(PointerTy_7);
FunctionType* FuncTy_26 = FunctionType::get(
 /*Result=*/PointerTy_9,
 /*Params=*/FuncTy_26_args,
 /*isVarArg=*/false);

PointerType* PointerTy_25 = PointerType::get(FuncTy_26, 0);

StructTy_struct_rubinius__Executable_fields.push_back(PointerTy_25);
StructType *StructTy_struct_rubinius__Inliners = mod->getTypeByName("struct.rubinius::Inliners");
if (!StructTy_struct_rubinius__Inliners) {
StructTy_struct_rubinius__Inliners = StructType::create(mod->getContext(), "struct.rubinius::Inliners");
}
std::vector<Type*>StructTy_struct_rubinius__Inliners_fields;
if (StructTy_struct_rubinius__Inliners->isOpaque()) {
StructTy_struct_rubinius__Inliners->setBody(StructTy_struct_rubinius__Inliners_fields, /*isPacked=*/false);
}

PointerType* PointerTy_33 = PointerType::get(StructTy_struct_rubinius__Inliners, 0);

StructTy_struct_rubinius__Executable_fields.push_back(PointerTy_33);
StructTy_struct_rubinius__Executable_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__Executable_fields.push_back(IntegerType::get(mod->getContext(), 8));
if (StructTy_struct_rubinius__Executable->isOpaque()) {
StructTy_struct_rubinius__Executable->setBody(StructTy_struct_rubinius__Executable_fields, /*isPacked=*/false);
}

StructTy_struct_rubinius__CompiledCode_fields.push_back(StructTy_struct_rubinius__Executable);
StructTy_struct_rubinius__CompiledCode_fields.push_back(PointerTy_9);
StructTy_struct_rubinius__CompiledCode_fields.push_back(PointerTy_8);
StructType *StructTy_struct_rubinius__InstructionSequence = mod->getTypeByName("struct.rubinius::InstructionSequence");
if (!StructTy_struct_rubinius__InstructionSequence) {
StructTy_struct_rubinius__InstructionSequence = StructType::create(mod->getContext(), "struct.rubinius::InstructionSequence");
}
std::vector<Type*>StructTy_struct_rubinius__InstructionSequence_fields;
if (StructTy_struct_rubinius__InstructionSequence->isOpaque()) {
StructTy_struct_rubinius__InstructionSequence->setBody(StructTy_struct_rubinius__InstructionSequence_fields, /*isPacked=*/false);
}

PointerType* PointerTy_34 = PointerType::get(StructTy_struct_rubinius__InstructionSequence, 0);

StructTy_struct_rubinius__CompiledCode_fields.push_back(PointerTy_34);
StructTy_struct_rubinius__CompiledCode_fields.push_back(PointerTy_15);
StructTy_struct_rubinius__CompiledCode_fields.push_back(PointerTy_15);
StructTy_struct_rubinius__CompiledCode_fields.push_back(PointerTy_15);
StructTy_struct_rubinius__CompiledCode_fields.push_back(PointerTy_15);
StructTy_struct_rubinius__CompiledCode_fields.push_back(PointerTy_15);
StructTy_struct_rubinius__CompiledCode_fields.push_back(PointerTy_15);
StructTy_struct_rubinius__CompiledCode_fields.push_back(PointerTy_16);
StructTy_struct_rubinius__CompiledCode_fields.push_back(PointerTy_16);
StructTy_struct_rubinius__CompiledCode_fields.push_back(PointerTy_8);
StructTy_struct_rubinius__CompiledCode_fields.push_back(PointerTy_28);
StructTy_struct_rubinius__CompiledCode_fields.push_back(PointerTy_12);
StructType *StructTy_struct_rubinius__MachineCode = mod->getTypeByName("struct.rubinius::MachineCode");
if (!StructTy_struct_rubinius__MachineCode) {
StructTy_struct_rubinius__MachineCode = StructType::create(mod->getContext(), "struct.rubinius::MachineCode");
}
std::vector<Type*>StructTy_struct_rubinius__MachineCode_fields;
if (StructTy_struct_rubinius__MachineCode->isOpaque()) {
StructTy_struct_rubinius__MachineCode->setBody(StructTy_struct_rubinius__MachineCode_fields, /*isPacked=*/false);
}

PointerType* PointerTy_35 = PointerType::get(StructTy_struct_rubinius__MachineCode, 0);

StructTy_struct_rubinius__CompiledCode_fields.push_back(PointerTy_35);
StructType *StructTy_struct_rubinius__jit__RuntimeDataHolder = mod->getTypeByName("struct.rubinius::jit::RuntimeDataHolder");
if (!StructTy_struct_rubinius__jit__RuntimeDataHolder) {
StructTy_struct_rubinius__jit__RuntimeDataHolder = StructType::create(mod->getContext(), "struct.rubinius::jit::RuntimeDataHolder");
}
std::vector<Type*>StructTy_struct_rubinius__jit__RuntimeDataHolder_fields;
if (StructTy_struct_rubinius__jit__RuntimeDataHolder->isOpaque()) {
StructTy_struct_rubinius__jit__RuntimeDataHolder->setBody(StructTy_struct_rubinius__jit__RuntimeDataHolder_fields, /*isPacked=*/false);
}

PointerType* PointerTy_36 = PointerType::get(StructTy_struct_rubinius__jit__RuntimeDataHolder, 0);

StructTy_struct_rubinius__CompiledCode_fields.push_back(PointerTy_36);
StructTy_struct_rubinius__CompiledCode_fields.push_back(PointerTy_16);
if (StructTy_struct_rubinius__CompiledCode->isOpaque()) {
StructTy_struct_rubinius__CompiledCode->setBody(StructTy_struct_rubinius__CompiledCode_fields, /*isPacked=*/false);
}


StructTy_struct_rubinius__jit__RuntimeData_fields.push_back(PointerTy_24);
StructTy_struct_rubinius__jit__RuntimeData_fields.push_back(PointerTy_8);
StructTy_struct_rubinius__jit__RuntimeData_fields.push_back(PointerTy_13);
if (StructTy_struct_rubinius__jit__RuntimeData->isOpaque()) {
StructTy_struct_rubinius__jit__RuntimeData->setBody(StructTy_struct_rubinius__jit__RuntimeData_fields, /*isPacked=*/false);
}

PointerType* PointerTy_23 = PointerType::get(StructTy_struct_rubinius__jit__RuntimeData, 0);

FuncTy_22_args.push_back(PointerTy_23);
FunctionType* FuncTy_22 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_22_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_37_args;
StructType *StructTy_struct_rubinius__Dispatch = mod->getTypeByName("struct.rubinius::Dispatch");
if (!StructTy_struct_rubinius__Dispatch) {
StructTy_struct_rubinius__Dispatch = StructType::create(mod->getContext(), "struct.rubinius::Dispatch");
}
std::vector<Type*>StructTy_struct_rubinius__Dispatch_fields;
StructTy_struct_rubinius__Dispatch_fields.push_back(PointerTy_8);
StructTy_struct_rubinius__Dispatch_fields.push_back(PointerTy_13);
StructTy_struct_rubinius__Dispatch_fields.push_back(PointerTy_32);
StructTy_struct_rubinius__Dispatch_fields.push_back(PointerTy_8);
StructTy_struct_rubinius__Dispatch_fields.push_back(IntegerType::get(mod->getContext(), 32));
if (StructTy_struct_rubinius__Dispatch->isOpaque()) {
StructTy_struct_rubinius__Dispatch->setBody(StructTy_struct_rubinius__Dispatch_fields, /*isPacked=*/false);
}

PointerType* PointerTy_38 = PointerType::get(StructTy_struct_rubinius__Dispatch, 0);

FuncTy_37_args.push_back(PointerTy_38);
FunctionType* FuncTy_37 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_37_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_39_args;
StructType *StructTy_struct_rubinius__CallSite = mod->getTypeByName("struct.rubinius::CallSite");
if (!StructTy_struct_rubinius__CallSite) {
StructTy_struct_rubinius__CallSite = StructType::create(mod->getContext(), "struct.rubinius::CallSite");
}
std::vector<Type*>StructTy_struct_rubinius__CallSite_fields;
StructTy_struct_rubinius__CallSite_fields.push_back(StructTy_struct_rubinius__Object);
StructTy_struct_rubinius__CallSite_fields.push_back(PointerTy_8);
std::vector<Type*>FuncTy_42_args;
FuncTy_42_args.push_back(PointerTy_3);
PointerType* PointerTy_40 = PointerType::get(StructTy_struct_rubinius__CallSite, 0);

FuncTy_42_args.push_back(PointerTy_40);
FuncTy_42_args.push_back(PointerTy_27);
FuncTy_42_args.push_back(PointerTy_7);
FuncTy_42_args.push_back(IntegerType::get(mod->getContext(), 32));
FunctionType* FuncTy_42 = FunctionType::get(
 /*Result=*/PointerTy_9,
 /*Params=*/FuncTy_42_args,
 /*isVarArg=*/false);

PointerType* PointerTy_41 = PointerType::get(FuncTy_42, 0);

StructTy_struct_rubinius__CallSite_fields.push_back(PointerTy_41);
StructTy_struct_rubinius__CallSite_fields.push_back(PointerTy_41);
std::vector<Type*>FuncTy_44_args;
FuncTy_44_args.push_back(PointerTy_3);
FuncTy_44_args.push_back(PointerTy_40);
FuncTy_44_args.push_back(PointerTy_10);
FuncTy_44_args.push_back(PointerTy_38);
FunctionType* FuncTy_44 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_44_args,
 /*isVarArg=*/false);

PointerType* PointerTy_43 = PointerType::get(FuncTy_44, 0);

StructTy_struct_rubinius__CallSite_fields.push_back(PointerTy_43);
StructTy_struct_rubinius__CallSite_fields.push_back(PointerTy_32);
StructTy_struct_rubinius__CallSite_fields.push_back(IntegerType::get(mod->getContext(), 32));
if (StructTy_struct_rubinius__CallSite->isOpaque()) {
StructTy_struct_rubinius__CallSite->setBody(StructTy_struct_rubinius__CallSite_fields, /*isPacked=*/false);
}


FuncTy_39_args.push_back(PointerTy_40);
FunctionType* FuncTy_39 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_39_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_45_args;
StructType *StructTy_struct_rubinius__MonoInlineCache = mod->getTypeByName("struct.rubinius::MonoInlineCache");
if (!StructTy_struct_rubinius__MonoInlineCache) {
StructTy_struct_rubinius__MonoInlineCache = StructType::create(mod->getContext(), "struct.rubinius::MonoInlineCache");
}
std::vector<Type*>StructTy_struct_rubinius__MonoInlineCache_fields;
StructTy_struct_rubinius__MonoInlineCache_fields.push_back(StructTy_struct_rubinius__CallSite);
StructTy_struct_rubinius__MonoInlineCache_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__MonoInlineCache_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__MonoInlineCache_fields.push_back(PointerTy_10);
StructTy_struct_rubinius__MonoInlineCache_fields.push_back(PointerTy_13);
StructTy_struct_rubinius__MonoInlineCache_fields.push_back(PointerTy_32);
StructTy_struct_rubinius__MonoInlineCache_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__MonoInlineCache_fields.push_back(IntegerType::get(mod->getContext(), 32));
if (StructTy_struct_rubinius__MonoInlineCache->isOpaque()) {
StructTy_struct_rubinius__MonoInlineCache->setBody(StructTy_struct_rubinius__MonoInlineCache_fields, /*isPacked=*/false);
}

PointerType* PointerTy_46 = PointerType::get(StructTy_struct_rubinius__MonoInlineCache, 0);

FuncTy_45_args.push_back(PointerTy_46);
FunctionType* FuncTy_45 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_45_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_47_args;
StructType *StructTy_struct_rubinius__PolyInlineCache = mod->getTypeByName("struct.rubinius::PolyInlineCache");
if (!StructTy_struct_rubinius__PolyInlineCache) {
StructTy_struct_rubinius__PolyInlineCache = StructType::create(mod->getContext(), "struct.rubinius::PolyInlineCache");
}
std::vector<Type*>StructTy_struct_rubinius__PolyInlineCache_fields;
StructTy_struct_rubinius__PolyInlineCache_fields.push_back(StructTy_struct_rubinius__CallSite);
StructType *StructTy_struct_rubinius__InlineCacheEntry = mod->getTypeByName("struct.rubinius::InlineCacheEntry");
if (!StructTy_struct_rubinius__InlineCacheEntry) {
StructTy_struct_rubinius__InlineCacheEntry = StructType::create(mod->getContext(), "struct.rubinius::InlineCacheEntry");
}
std::vector<Type*>StructTy_struct_rubinius__InlineCacheEntry_fields;
StructTy_struct_rubinius__InlineCacheEntry_fields.push_back(StructTy_struct_rubinius__Object);
StructTy_struct_rubinius__InlineCacheEntry_fields.push_back(PointerTy_13);
StructTy_struct_rubinius__InlineCacheEntry_fields.push_back(PointerTy_10);
StructTy_struct_rubinius__InlineCacheEntry_fields.push_back(PointerTy_32);
StructTy_struct_rubinius__InlineCacheEntry_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__InlineCacheEntry_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__InlineCacheEntry_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__InlineCacheEntry_fields.push_back(IntegerType::get(mod->getContext(), 32));
if (StructTy_struct_rubinius__InlineCacheEntry->isOpaque()) {
StructTy_struct_rubinius__InlineCacheEntry->setBody(StructTy_struct_rubinius__InlineCacheEntry_fields, /*isPacked=*/false);
}

PointerType* PointerTy_50 = PointerType::get(StructTy_struct_rubinius__InlineCacheEntry, 0);

ArrayType* ArrayTy_49 = ArrayType::get(PointerTy_50, 3);

StructTy_struct_rubinius__PolyInlineCache_fields.push_back(ArrayTy_49);
StructTy_struct_rubinius__PolyInlineCache_fields.push_back(IntegerType::get(mod->getContext(), 32));
if (StructTy_struct_rubinius__PolyInlineCache->isOpaque()) {
StructTy_struct_rubinius__PolyInlineCache->setBody(StructTy_struct_rubinius__PolyInlineCache_fields, /*isPacked=*/false);
}

PointerType* PointerTy_48 = PointerType::get(StructTy_struct_rubinius__PolyInlineCache, 0);

FuncTy_47_args.push_back(PointerTy_48);
FunctionType* FuncTy_47 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_47_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_51_args;
FuncTy_51_args.push_back(PointerTy_50);
FunctionType* FuncTy_51 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_51_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_52_args;
StructType *StructTy_struct_rubinius__ConstantCache = mod->getTypeByName("struct.rubinius::ConstantCache");
if (!StructTy_struct_rubinius__ConstantCache) {
StructTy_struct_rubinius__ConstantCache = StructType::create(mod->getContext(), "struct.rubinius::ConstantCache");
}
std::vector<Type*>StructTy_struct_rubinius__ConstantCache_fields;
StructTy_struct_rubinius__ConstantCache_fields.push_back(StructTy_struct_rubinius__Object);
StructTy_struct_rubinius__ConstantCache_fields.push_back(PointerTy_8);
StructTy_struct_rubinius__ConstantCache_fields.push_back(PointerTy_9);
StructTy_struct_rubinius__ConstantCache_fields.push_back(PointerTy_13);
StructTy_struct_rubinius__ConstantCache_fields.push_back(PointerTy_28);
StructTy_struct_rubinius__ConstantCache_fields.push_back(PointerTy_32);
StructTy_struct_rubinius__ConstantCache_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__ConstantCache_fields.push_back(IntegerType::get(mod->getContext(), 32));
if (StructTy_struct_rubinius__ConstantCache->isOpaque()) {
StructTy_struct_rubinius__ConstantCache->setBody(StructTy_struct_rubinius__ConstantCache_fields, /*isPacked=*/false);
}

PointerType* PointerTy_53 = PointerType::get(StructTy_struct_rubinius__ConstantCache, 0);

FuncTy_52_args.push_back(PointerTy_53);
FunctionType* FuncTy_52 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_52_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_54_args;
FuncTy_54_args.push_back(PointerTy_31);
FunctionType* FuncTy_54 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_54_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_55_args;
StructType *StructTy_struct_rubinius__UnwindInfo = mod->getTypeByName("struct.rubinius::UnwindInfo");
if (!StructTy_struct_rubinius__UnwindInfo) {
StructTy_struct_rubinius__UnwindInfo = StructType::create(mod->getContext(), "struct.rubinius::UnwindInfo");
}
std::vector<Type*>StructTy_struct_rubinius__UnwindInfo_fields;
StructTy_struct_rubinius__UnwindInfo_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__UnwindInfo_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__UnwindInfo_fields.push_back(IntegerType::get(mod->getContext(), 32));
if (StructTy_struct_rubinius__UnwindInfo->isOpaque()) {
StructTy_struct_rubinius__UnwindInfo->setBody(StructTy_struct_rubinius__UnwindInfo_fields, /*isPacked=*/false);
}

PointerType* PointerTy_56 = PointerType::get(StructTy_struct_rubinius__UnwindInfo, 0);

FuncTy_55_args.push_back(PointerTy_56);
FunctionType* FuncTy_55 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_55_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_57_args;
PointerType* PointerTy_58 = PointerType::get(StructTy_union_rubinius__HeaderWord, 0);

FuncTy_57_args.push_back(PointerTy_58);
FunctionType* FuncTy_57 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_57_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_59_args;
FuncTy_59_args.push_back(PointerTy_9);
FunctionType* FuncTy_59 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_59_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_60_args;
StructType *StructTy_struct_rubinius__ObjectFlags = mod->getTypeByName("struct.rubinius::ObjectFlags");
if (!StructTy_struct_rubinius__ObjectFlags) {
StructTy_struct_rubinius__ObjectFlags = StructType::create(mod->getContext(), "struct.rubinius::ObjectFlags");
}
std::vector<Type*>StructTy_struct_rubinius__ObjectFlags_fields;
StructTy_struct_rubinius__ObjectFlags_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__ObjectFlags_fields.push_back(IntegerType::get(mod->getContext(), 32));
if (StructTy_struct_rubinius__ObjectFlags->isOpaque()) {
StructTy_struct_rubinius__ObjectFlags->setBody(StructTy_struct_rubinius__ObjectFlags_fields, /*isPacked=*/false);
}

PointerType* PointerTy_61 = PointerType::get(StructTy_struct_rubinius__ObjectFlags, 0);

FuncTy_60_args.push_back(PointerTy_61);
FunctionType* FuncTy_60 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_60_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_62_args;
PointerType* PointerTy_63 = PointerType::get(StructTy_struct_rubinius__ObjectHeader, 0);

FuncTy_62_args.push_back(PointerTy_63);
FunctionType* FuncTy_62 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_62_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_64_args;
FuncTy_64_args.push_back(PointerTy_14);
FunctionType* FuncTy_64 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_64_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_65_args;
StructType *StructTy_struct_rubinius__BlockEnvironment = mod->getTypeByName("struct.rubinius::BlockEnvironment");
if (!StructTy_struct_rubinius__BlockEnvironment) {
StructTy_struct_rubinius__BlockEnvironment = StructType::create(mod->getContext(), "struct.rubinius::BlockEnvironment");
}
std::vector<Type*>StructTy_struct_rubinius__BlockEnvironment_fields;
StructTy_struct_rubinius__BlockEnvironment_fields.push_back(StructTy_struct_rubinius__Object);
StructTy_struct_rubinius__BlockEnvironment_fields.push_back(PointerTy_29);
StructTy_struct_rubinius__BlockEnvironment_fields.push_back(PointerTy_29);
StructTy_struct_rubinius__BlockEnvironment_fields.push_back(PointerTy_24);
StructTy_struct_rubinius__BlockEnvironment_fields.push_back(PointerTy_28);
StructTy_struct_rubinius__BlockEnvironment_fields.push_back(PointerTy_13);
if (StructTy_struct_rubinius__BlockEnvironment->isOpaque()) {
StructTy_struct_rubinius__BlockEnvironment->setBody(StructTy_struct_rubinius__BlockEnvironment_fields, /*isPacked=*/false);
}

PointerType* PointerTy_66 = PointerType::get(StructTy_struct_rubinius__BlockEnvironment, 0);

FuncTy_65_args.push_back(PointerTy_66);
FunctionType* FuncTy_65 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_65_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_67_args;
StructType *StructTy_struct_rubinius__BlockInvocation = mod->getTypeByName("struct.rubinius::BlockInvocation");
if (!StructTy_struct_rubinius__BlockInvocation) {
StructTy_struct_rubinius__BlockInvocation = StructType::create(mod->getContext(), "struct.rubinius::BlockInvocation");
}
std::vector<Type*>StructTy_struct_rubinius__BlockInvocation_fields;
StructTy_struct_rubinius__BlockInvocation_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__BlockInvocation_fields.push_back(PointerTy_9);
StructTy_struct_rubinius__BlockInvocation_fields.push_back(PointerTy_28);
StructTy_struct_rubinius__BlockInvocation_fields.push_back(PointerTy_13);
if (StructTy_struct_rubinius__BlockInvocation->isOpaque()) {
StructTy_struct_rubinius__BlockInvocation->setBody(StructTy_struct_rubinius__BlockInvocation_fields, /*isPacked=*/false);
}

PointerType* PointerTy_68 = PointerType::get(StructTy_struct_rubinius__BlockInvocation, 0);

FuncTy_67_args.push_back(PointerTy_68);
FunctionType* FuncTy_67 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_67_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_69_args;
FuncTy_69_args.push_back(PointerTy_27);
FunctionType* FuncTy_69 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_69_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_70_args;
FuncTy_70_args.push_back(PointerTy_10);
FunctionType* FuncTy_70 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_70_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_71_args;
FuncTy_71_args.push_back(PointerTy_24);
FunctionType* FuncTy_71 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_71_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_72_args;
FuncTy_72_args.push_back(PointerTy_32);
FunctionType* FuncTy_72 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_72_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_73_args;
StructType *StructTy_struct_rubinius__Float = mod->getTypeByName("struct.rubinius::Float");
if (!StructTy_struct_rubinius__Float) {
StructTy_struct_rubinius__Float = StructType::create(mod->getContext(), "struct.rubinius::Float");
}
std::vector<Type*>StructTy_struct_rubinius__Float_fields;
StructType *StructTy_struct_rubinius__Numeric = mod->getTypeByName("struct.rubinius::Numeric");
if (!StructTy_struct_rubinius__Numeric) {
StructTy_struct_rubinius__Numeric = StructType::create(mod->getContext(), "struct.rubinius::Numeric");
}
std::vector<Type*>StructTy_struct_rubinius__Numeric_fields;
StructTy_struct_rubinius__Numeric_fields.push_back(StructTy_struct_rubinius__Object);
if (StructTy_struct_rubinius__Numeric->isOpaque()) {
StructTy_struct_rubinius__Numeric->setBody(StructTy_struct_rubinius__Numeric_fields, /*isPacked=*/false);
}

StructTy_struct_rubinius__Float_fields.push_back(StructTy_struct_rubinius__Numeric);
StructTy_struct_rubinius__Float_fields.push_back(Type::getDoubleTy(mod->getContext()));
if (StructTy_struct_rubinius__Float->isOpaque()) {
StructTy_struct_rubinius__Float->setBody(StructTy_struct_rubinius__Float_fields, /*isPacked=*/false);
}

PointerType* PointerTy_74 = PointerType::get(StructTy_struct_rubinius__Float, 0);

FuncTy_73_args.push_back(PointerTy_74);
FunctionType* FuncTy_73 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_73_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_75_args;
FuncTy_75_args.push_back(PointerTy_13);
FunctionType* FuncTy_75 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_75_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_76_args;
PointerType* PointerTy_77 = PointerType::get(StructTy_struct_rubinius__Numeric, 0);

FuncTy_76_args.push_back(PointerTy_77);
FunctionType* FuncTy_76 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_76_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_78_args;
FuncTy_78_args.push_back(PointerTy_16);
FunctionType* FuncTy_78 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_78_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_79_args;
FuncTy_79_args.push_back(PointerTy_29);
FunctionType* FuncTy_79 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_79_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_80_args;
StructType *StructTy_struct_rubinius__ByteArray = mod->getTypeByName("struct.rubinius::ByteArray");
if (!StructTy_struct_rubinius__ByteArray) {
StructTy_struct_rubinius__ByteArray = StructType::create(mod->getContext(), "struct.rubinius::ByteArray");
}
std::vector<Type*>StructTy_struct_rubinius__ByteArray_fields;
StructTy_struct_rubinius__ByteArray_fields.push_back(StructTy_struct_rubinius__Object);
StructTy_struct_rubinius__ByteArray_fields.push_back(IntegerType::get(mod->getContext(), 32));
ArrayType* ArrayTy_82 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 0);

StructTy_struct_rubinius__ByteArray_fields.push_back(ArrayTy_82);
if (StructTy_struct_rubinius__ByteArray->isOpaque()) {
StructTy_struct_rubinius__ByteArray->setBody(StructTy_struct_rubinius__ByteArray_fields, /*isPacked=*/false);
}

PointerType* PointerTy_81 = PointerType::get(StructTy_struct_rubinius__ByteArray, 0);

FuncTy_80_args.push_back(PointerTy_81);
FunctionType* FuncTy_80 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_80_args,
 /*isVarArg=*/false);

std::vector<Type*>FuncTy_83_args;
StructType *StructTy_struct_rubinius__Proc = mod->getTypeByName("struct.rubinius::Proc");
if (!StructTy_struct_rubinius__Proc) {
StructTy_struct_rubinius__Proc = StructType::create(mod->getContext(), "struct.rubinius::Proc");
}
std::vector<Type*>StructTy_struct_rubinius__Proc_fields;
StructTy_struct_rubinius__Proc_fields.push_back(StructTy_struct_rubinius__BlockEnvironment);
StructTy_struct_rubinius__Proc_fields.push_back(StructTy_struct_rubinius__Object);
StructTy_struct_rubinius__Proc_fields.push_back(StructTy_struct_rubinius__Object);
if (StructTy_struct_rubinius__Proc->isOpaque()) {
StructTy_struct_rubinius__Proc->setBody(StructTy_struct_rubinius__Proc_fields, /*isPacked=*/false);
}

PointerType* PointerTy_84 = PointerType::get(StructTy_struct_rubinius__Proc, 0);

FuncTy_83_args.push_back(PointerTy_84);
FunctionType* FuncTy_83 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_83_args,
 /*isVarArg=*/false);


// Function Declarations

Function* func_outputVMJIT = mod->getFunction("outputVMJIT");
if (!func_outputVMJIT) {
func_outputVMJIT = Function::Create(
 /*Type=*/FuncTy_0,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputVMJIT", mod); // (external, no body)
func_outputVMJIT->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputVMJIT_PAL;
func_outputVMJIT->setAttributes(func_outputVMJIT_PAL);

Function* func_outputState = mod->getFunction("outputState");
if (!func_outputState) {
func_outputState = Function::Create(
 /*Type=*/FuncTy_2,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputState", mod); // (external, no body)
func_outputState->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputState_PAL;
func_outputState->setAttributes(func_outputState_PAL);

Function* func_outputArguments = mod->getFunction("outputArguments");
if (!func_outputArguments) {
func_outputArguments = Function::Create(
 /*Type=*/FuncTy_6,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputArguments", mod); // (external, no body)
func_outputArguments->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputArguments_PAL;
func_outputArguments->setAttributes(func_outputArguments_PAL);

Function* func_outputRuntimeData = mod->getFunction("outputRuntimeData");
if (!func_outputRuntimeData) {
func_outputRuntimeData = Function::Create(
 /*Type=*/FuncTy_22,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputRuntimeData", mod); // (external, no body)
func_outputRuntimeData->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputRuntimeData_PAL;
func_outputRuntimeData->setAttributes(func_outputRuntimeData_PAL);

Function* func_outputDispatch = mod->getFunction("outputDispatch");
if (!func_outputDispatch) {
func_outputDispatch = Function::Create(
 /*Type=*/FuncTy_37,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputDispatch", mod); // (external, no body)
func_outputDispatch->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputDispatch_PAL;
func_outputDispatch->setAttributes(func_outputDispatch_PAL);

Function* func_outputCallSite = mod->getFunction("outputCallSite");
if (!func_outputCallSite) {
func_outputCallSite = Function::Create(
 /*Type=*/FuncTy_39,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputCallSite", mod); // (external, no body)
func_outputCallSite->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputCallSite_PAL;
func_outputCallSite->setAttributes(func_outputCallSite_PAL);

Function* func_outputMonoInlineCache = mod->getFunction("outputMonoInlineCache");
if (!func_outputMonoInlineCache) {
func_outputMonoInlineCache = Function::Create(
 /*Type=*/FuncTy_45,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputMonoInlineCache", mod); // (external, no body)
func_outputMonoInlineCache->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputMonoInlineCache_PAL;
func_outputMonoInlineCache->setAttributes(func_outputMonoInlineCache_PAL);

Function* func_outputPolyInlineCache = mod->getFunction("outputPolyInlineCache");
if (!func_outputPolyInlineCache) {
func_outputPolyInlineCache = Function::Create(
 /*Type=*/FuncTy_47,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputPolyInlineCache", mod); // (external, no body)
func_outputPolyInlineCache->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputPolyInlineCache_PAL;
func_outputPolyInlineCache->setAttributes(func_outputPolyInlineCache_PAL);

Function* func_outputInlineCacheEntry = mod->getFunction("outputInlineCacheEntry");
if (!func_outputInlineCacheEntry) {
func_outputInlineCacheEntry = Function::Create(
 /*Type=*/FuncTy_51,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputInlineCacheEntry", mod); // (external, no body)
func_outputInlineCacheEntry->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputInlineCacheEntry_PAL;
func_outputInlineCacheEntry->setAttributes(func_outputInlineCacheEntry_PAL);

Function* func_outputConstantCache = mod->getFunction("outputConstantCache");
if (!func_outputConstantCache) {
func_outputConstantCache = Function::Create(
 /*Type=*/FuncTy_52,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputConstantCache", mod); // (external, no body)
func_outputConstantCache->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputConstantCache_PAL;
func_outputConstantCache->setAttributes(func_outputConstantCache_PAL);

Function* func_outputStackVariables = mod->getFunction("outputStackVariables");
if (!func_outputStackVariables) {
func_outputStackVariables = Function::Create(
 /*Type=*/FuncTy_54,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputStackVariables", mod); // (external, no body)
func_outputStackVariables->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputStackVariables_PAL;
func_outputStackVariables->setAttributes(func_outputStackVariables_PAL);

Function* func_outputUnwindInfo = mod->getFunction("outputUnwindInfo");
if (!func_outputUnwindInfo) {
func_outputUnwindInfo = Function::Create(
 /*Type=*/FuncTy_55,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputUnwindInfo", mod); // (external, no body)
func_outputUnwindInfo->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputUnwindInfo_PAL;
func_outputUnwindInfo->setAttributes(func_outputUnwindInfo_PAL);

Function* func_outputHeaderWord = mod->getFunction("outputHeaderWord");
if (!func_outputHeaderWord) {
func_outputHeaderWord = Function::Create(
 /*Type=*/FuncTy_57,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputHeaderWord", mod); // (external, no body)
func_outputHeaderWord->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputHeaderWord_PAL;
func_outputHeaderWord->setAttributes(func_outputHeaderWord_PAL);

Function* func_outputObject = mod->getFunction("outputObject");
if (!func_outputObject) {
func_outputObject = Function::Create(
 /*Type=*/FuncTy_59,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputObject", mod); // (external, no body)
func_outputObject->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputObject_PAL;
func_outputObject->setAttributes(func_outputObject_PAL);

Function* func_outputObjectFlags = mod->getFunction("outputObjectFlags");
if (!func_outputObjectFlags) {
func_outputObjectFlags = Function::Create(
 /*Type=*/FuncTy_60,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputObjectFlags", mod); // (external, no body)
func_outputObjectFlags->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputObjectFlags_PAL;
func_outputObjectFlags->setAttributes(func_outputObjectFlags_PAL);

Function* func_outputObjectHeader = mod->getFunction("outputObjectHeader");
if (!func_outputObjectHeader) {
func_outputObjectHeader = Function::Create(
 /*Type=*/FuncTy_62,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputObjectHeader", mod); // (external, no body)
func_outputObjectHeader->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputObjectHeader_PAL;
func_outputObjectHeader->setAttributes(func_outputObjectHeader_PAL);

Function* func_outputArray = mod->getFunction("outputArray");
if (!func_outputArray) {
func_outputArray = Function::Create(
 /*Type=*/FuncTy_64,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputArray", mod); // (external, no body)
func_outputArray->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputArray_PAL;
func_outputArray->setAttributes(func_outputArray_PAL);

Function* func_outputBlockEnvironment = mod->getFunction("outputBlockEnvironment");
if (!func_outputBlockEnvironment) {
func_outputBlockEnvironment = Function::Create(
 /*Type=*/FuncTy_65,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputBlockEnvironment", mod); // (external, no body)
func_outputBlockEnvironment->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputBlockEnvironment_PAL;
func_outputBlockEnvironment->setAttributes(func_outputBlockEnvironment_PAL);

Function* func_outputBlockInvocation = mod->getFunction("outputBlockInvocation");
if (!func_outputBlockInvocation) {
func_outputBlockInvocation = Function::Create(
 /*Type=*/FuncTy_67,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputBlockInvocation", mod); // (external, no body)
func_outputBlockInvocation->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputBlockInvocation_PAL;
func_outputBlockInvocation->setAttributes(func_outputBlockInvocation_PAL);

Function* func_outputCallFrame = mod->getFunction("outputCallFrame");
if (!func_outputCallFrame) {
func_outputCallFrame = Function::Create(
 /*Type=*/FuncTy_69,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputCallFrame", mod); // (external, no body)
func_outputCallFrame->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputCallFrame_PAL;
func_outputCallFrame->setAttributes(func_outputCallFrame_PAL);

Function* func_outputClass = mod->getFunction("outputClass");
if (!func_outputClass) {
func_outputClass = Function::Create(
 /*Type=*/FuncTy_70,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputClass", mod); // (external, no body)
func_outputClass->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputClass_PAL;
func_outputClass->setAttributes(func_outputClass_PAL);

Function* func_outputCompiledCode = mod->getFunction("outputCompiledCode");
if (!func_outputCompiledCode) {
func_outputCompiledCode = Function::Create(
 /*Type=*/FuncTy_71,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputCompiledCode", mod); // (external, no body)
func_outputCompiledCode->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputCompiledCode_PAL;
func_outputCompiledCode->setAttributes(func_outputCompiledCode_PAL);

Function* func_outputExecutable = mod->getFunction("outputExecutable");
if (!func_outputExecutable) {
func_outputExecutable = Function::Create(
 /*Type=*/FuncTy_72,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputExecutable", mod); // (external, no body)
func_outputExecutable->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputExecutable_PAL;
func_outputExecutable->setAttributes(func_outputExecutable_PAL);

Function* func_outputFloat = mod->getFunction("outputFloat");
if (!func_outputFloat) {
func_outputFloat = Function::Create(
 /*Type=*/FuncTy_73,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputFloat", mod); // (external, no body)
func_outputFloat->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputFloat_PAL;
func_outputFloat->setAttributes(func_outputFloat_PAL);

Function* func_outputModule = mod->getFunction("outputModule");
if (!func_outputModule) {
func_outputModule = Function::Create(
 /*Type=*/FuncTy_75,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputModule", mod); // (external, no body)
func_outputModule->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputModule_PAL;
func_outputModule->setAttributes(func_outputModule_PAL);

Function* func_outputNumeric = mod->getFunction("outputNumeric");
if (!func_outputNumeric) {
func_outputNumeric = Function::Create(
 /*Type=*/FuncTy_76,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputNumeric", mod); // (external, no body)
func_outputNumeric->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputNumeric_PAL;
func_outputNumeric->setAttributes(func_outputNumeric_PAL);

Function* func_outputTuple = mod->getFunction("outputTuple");
if (!func_outputTuple) {
func_outputTuple = Function::Create(
 /*Type=*/FuncTy_78,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputTuple", mod); // (external, no body)
func_outputTuple->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputTuple_PAL;
func_outputTuple->setAttributes(func_outputTuple_PAL);

Function* func_outputVariableScope = mod->getFunction("outputVariableScope");
if (!func_outputVariableScope) {
func_outputVariableScope = Function::Create(
 /*Type=*/FuncTy_79,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputVariableScope", mod); // (external, no body)
func_outputVariableScope->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputVariableScope_PAL;
func_outputVariableScope->setAttributes(func_outputVariableScope_PAL);

Function* func_outputByteArray = mod->getFunction("outputByteArray");
if (!func_outputByteArray) {
func_outputByteArray = Function::Create(
 /*Type=*/FuncTy_80,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputByteArray", mod); // (external, no body)
func_outputByteArray->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputByteArray_PAL;
func_outputByteArray->setAttributes(func_outputByteArray_PAL);

Function* func_outputProc = mod->getFunction("outputProc");
if (!func_outputProc) {
func_outputProc = Function::Create(
 /*Type=*/FuncTy_83,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"outputProc", mod); // (external, no body)
func_outputProc->setCallingConv(CallingConv::C);
}
AttrListPtr func_outputProc_PAL;
func_outputProc->setAttributes(func_outputProc_PAL);

// Global Variable Declarations


// Constant Definitions

// Global Variable Definitions

// Function Definitions

return mod;

}
