# *** This file is generated by InstructionParser ***

class Rubinius::Optimizer
  module GeneratorMethods
      def noop
        @current_block.add_stack(0, 0)
      end

      def push_nil
        @current_block.add_stack(0, 1)
      end

      def push_true
        @current_block.add_stack(0, 1)
      end

      def push_false
        @current_block.add_stack(0, 1)
      end

      def push_int(arg1)
        if arg1 > 2 and arg1 < 256
          @current_block.add_stack(0, 1)
        else
          case arg1
          when -1
            meta_push_neg_1
          when 0
            meta_push_0
          when 1
            meta_push_1
          when 2
            meta_push_2
          else
            push_literal arg1
          end
        end
      end

      def push_self
        @current_block.add_stack(0, 1)
      end

      def set_literal(arg1)
        @current_block.add_stack(1, 1)
      end

      def emit_push_literal(arg1)
        @current_block.add_stack(0, 1)
      end

      def goto(arg1)
        @current_block.add_stack(0, 0)
      end

      def goto_if_false(arg1)
        @current_block.add_stack(1, 0)
      end

      def goto_if_true(arg1)
        @current_block.add_stack(1, 0)
      end

      def ret
        @current_block.add_stack(1, 1)
      end

      def swap_stack
        @current_block.add_stack(2, 2)
      end

      def dup_top
        @current_block.add_stack(1, 2)
      end

      def dup_many(arg1)
        @current_block.add_stack(arg1, (arg1 * 2))
      end

      def pop
        @current_block.add_stack(1, 0)
      end

      def pop_many(arg1)
        @current_block.add_stack(arg1, 0)
      end

      def rotate(arg1)
        @current_block.add_stack(arg1, (arg1 * 1))
      end

      def move_down(arg1)
        @current_block.add_stack(arg1, (arg1 * 1))
      end

      def set_local(arg1)
        @current_block.add_stack(1, 1)
      end

      def push_local(arg1)
        @current_block.add_stack(0, 1)
      end

      def push_local_depth(arg1, arg2)
        @current_block.add_stack(0, 1)
      end

      def set_local_depth(arg1, arg2)
        @current_block.add_stack(1, 1)
      end

      def passed_arg(arg1)
        @current_block.add_stack(0, 1)
      end

      def push_current_exception
        @current_block.add_stack(0, 1)
      end

      def clear_exception
        @current_block.add_stack(0, 0)
      end

      def push_exception_state
        @current_block.add_stack(0, 1)
      end

      def restore_exception_state
        @current_block.add_stack(1, 0)
      end

      def raise_exc
        @current_block.add_stack(1, 0)
      end

      def setup_unwind(arg1, arg2)
        @current_block.add_stack(0, 0)
      end

      def pop_unwind
        @current_block.add_stack(0, 0)
      end

      def raise_return
        @current_block.add_stack(1, 1)
      end

      def ensure_return
        @current_block.add_stack(1, 1)
      end

      def raise_break
        @current_block.add_stack(1, 1)
      end

      def reraise
        @current_block.add_stack(0, 0)
      end

      def make_array(arg1)
        @current_block.add_stack(arg1, 1)
      end

      def cast_array
        unless @instruction == 36 or @instruction == 35
        end
      end

      def shift_array
        @current_block.add_stack(1, 2)
      end

      def set_ivar(arg1)
        @current_block.add_stack(1, 1)
      end

      def push_ivar(arg1)
        @current_block.add_stack(0, 1)
      end

      def set_const(arg1)
        @current_block.add_stack(1, 1)
      end

      def set_const_at(arg1)
        @current_block.add_stack(2, 1)
      end

      def find_const(arg1)
        @current_block.add_stack(1, 1)
      end

      def push_cpath_top
        @current_block.add_stack(0, 1)
      end

      def push_const_fast(arg1)
        @current_block.add_stack(0, 1)
      end

      def find_const_fast(arg1)
        @current_block.add_stack(1, 1)
      end

      def set_call_flags(arg1)
        @current_block.add_stack(0, 0)
      end

      def allow_private
        @current_block.add_stack(0, 0)
      end

      def send_method(arg1)
        @current_block.add_stack(1, 1)
      end

      def send_stack(arg1, arg2)
        @current_block.add_stack(arg2+1, 1)
      end

      def send_stack_with_block(arg1, arg2)
        @current_block.add_stack(arg2+2, 1)
      end

      def send_stack_with_splat(arg1, arg2)
        @current_block.add_stack(arg2+3, 1)
      end

      def send_super_stack_with_block(arg1, arg2)
        @current_block.add_stack(arg2+1, 1)
      end

      def send_super_stack_with_splat(arg1, arg2)
        @current_block.add_stack(arg2+2, 1)
      end

      def push_block
        @current_block.add_stack(0, 1)
      end

      def passed_blockarg(arg1)
        @current_block.add_stack(0, 1)
      end

      def create_block(arg1)
        arg1 = add_literal arg1
        @current_block.add_stack(0, 1)
      end

      def cast_for_single_block_arg
        @current_block.add_stack(0, 1)
      end

      def cast_for_multi_block_arg
        @current_block.add_stack(0, 1)
      end

      def cast_for_splat_block_arg
        @current_block.add_stack(0, 1)
      end

      def yield_stack(arg1)
        @current_block.add_stack(arg1, 1)
      end

      def yield_splat(arg1)
        @current_block.add_stack(arg1+1, 1)
      end

      def string_append
        @current_block.add_stack(2, 1)
      end

      def string_build(arg1)
        @current_block.add_stack(arg1, 1)
      end

      def string_dup
        @current_block.add_stack(1, 1)
      end

      def push_scope
        @current_block.add_stack(0, 1)
      end

      def add_scope
        @current_block.add_stack(1, 0)
      end

      def push_variables
        @current_block.add_stack(0, 1)
      end

      def check_interrupts
        @current_block.add_stack(0, 0)
      end

      def yield_debugger
        @current_block.add_stack(0, 0)
      end

      def is_nil
        @current_block.add_stack(1, 1)
      end

      def check_serial(arg1, arg2)
        arg2 = Integer(arg2)
        @current_block.add_stack(1, 1)
      end

      def check_serial_private(arg1, arg2)
        arg2 = Integer(arg2)
        @current_block.add_stack(1, 1)
      end

      def push_my_field(arg1)
        @current_block.add_stack(0, 1)
      end

      def store_my_field(arg1)
        @current_block.add_stack(1, 1)
      end

      def kind_of
        @current_block.add_stack(2, 1)
      end

      def instance_of
        @current_block.add_stack(2, 1)
      end

      def meta_push_neg_1
        @current_block.add_stack(0, 1)
      end

      def meta_push_0
        @current_block.add_stack(0, 1)
      end

      def meta_push_1
        @current_block.add_stack(0, 1)
      end

      def meta_push_2
        @current_block.add_stack(0, 1)
      end

      def meta_send_op_plus(arg1)
        @current_block.add_stack(2, 1)
      end

      def meta_send_op_minus(arg1)
        @current_block.add_stack(2, 1)
      end

      def meta_send_op_equal(arg1)
        @current_block.add_stack(2, 1)
      end

      def meta_send_op_lt(arg1)
        @current_block.add_stack(2, 1)
      end

      def meta_send_op_gt(arg1)
        @current_block.add_stack(2, 1)
      end

      def meta_send_op_tequal(arg1)
        @current_block.add_stack(2, 1)
      end

      def meta_send_call(arg1, arg2)
        @current_block.add_stack(arg2+1, 1)
      end

      def push_my_offset(arg1)
        @current_block.add_stack(0, 1)
      end

      def zsuper(arg1)
        @current_block.add_stack(1, 1)
      end

      def push_block_arg
        @current_block.add_stack(0, 1)
      end

      def push_undef
        @current_block.add_stack(0, 1)
      end

      def push_stack_local(arg1)
        @current_block.add_stack(0, 1)
      end

      def set_stack_local(arg1)
        @current_block.add_stack(1, 1)
      end

      def push_has_block
        @current_block.add_stack(0, 1)
      end

      def push_proc
        @current_block.add_stack(0, 1)
      end

      def check_frozen
        @current_block.add_stack(1, 1)
      end

      def cast_multi_value
        @current_block.add_stack(1, 1)
      end

      def invoke_primitive(arg1, arg2)
        arg2 = Integer(arg2)
        @current_block.add_stack(arg2, 1)
      end

      def push_rubinius
        @current_block.add_stack(0, 1)
      end

      def call_custom(arg1, arg2)
        arg2 = Integer(arg2)
        @current_block.add_stack(arg2+1, 1)
      end

      def meta_to_s(arg1)
        @current_block.add_stack(1, 1)
      end

      def push_type
        @current_block.add_stack(0, 1)
      end

      def push_mirror
        @current_block.add_stack(0, 1)
      end

  end
end
